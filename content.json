{
  "allData": {
    "1-basics": {
      "1-hello-world": {
        "c": {
          "hello_world.c": "#include <stdio.h>\r\n\r\nint main()\r\n{\r\n    printf(\"Hello World!\\n\");\r\n    return 0;\r\n}"
        },
        "cpp": {
          "hello_world.cpp": "#include <iostream>\r\n\r\nint main()\r\n{\r\n    std::cout << \"Hello World!\" << std::endl;\r\n    return 0;\r\n}"
        },
        "cs": {
          "HelloWorld.cs": "using System;\r\n\r\nclass Program\r\n{\r\n    static void Main()\r\n    {\r\n        Console.WriteLine(\"Hello World!\");\r\n    }\r\n}"
        },
        "go": {
          "hello_world.go": "package main\r\n\r\nimport \"fmt\"\r\n\r\nfunc main() {\r\n\tfmt.Println(\"Hello World!\")\r\n}"
        },
        "hs": {
          "hello-world.hs": "main :: IO ()\r\nmain = putStrLn \"Hello, World!\""
        },
        "java": {
          "HelloWorld.java": "public class HelloWorld {\r\n    public static void main(String[] args) {\r\n        System.out.println(\"Hello World!\");\r\n    }\r\n}"
        },
        "js": {
          "helloWorld.js": "console.log(\"Hello World!\");"
        },
        "py": {
          "hello_world.py": "print (\"Hello World!\")"
        },
        "rb": {
          "hello_world.rb": "puts 'Hello world!'"
        },
        "rs": {
          "hello_world.rs": "fn main() {\r\n    println!(\"Hello world!\");\r\n}"
        },
        "ts": {
          "helloWorld.ts": "console.log(\"Hello World!\");"
        }
      },
      "2-user-input": {
        "c": {
          "user_input.c": "#include <stdio.h>\r\n\r\nint main()\r\n{\r\n    char input[100];\r\n    scanf(\"%99s\", input);\r\n    return 0;\r\n}"
        },
        "cpp": {
          "user_input.cpp": "#include <iostream>\r\n\r\nint main()\r\n{\r\n    std::string input;\r\n    std::cin >> input;\r\n    return 0;\r\n}"
        },
        "cs": {
          "UserInput.cs": "using System;\r\n\r\nclass Program\r\n{\r\n    static void Main()\r\n    {\r\n        string input = Console.ReadLine();\r\n    }\r\n}"
        },
        "go": {
          "user_input.go": "package main\r\n\r\nimport (\r\n    \"bufio\"\r\n    \"fmt\"\r\n    \"os\"\r\n)\r\n\r\nfunc main() {\r\n    reader := bufio.NewReader(os.Stdin)\r\n    input, _ := reader.ReadString('\\n')\r\n}"
        },
        "hs": {
          "user-input.hs": "main :: IO ()\r\nmain = do\r\n    input <- getLine\r\n    return ()"
        },
        "java": {
          "UserInput.java": "import java.util.Scanner;\r\n\r\npublic class UserInput {\r\n    public static void main(String[] args) {\r\n        Scanner scanner = new Scanner(System.in);\r\n        String input = scanner.nextLine();\r\n        scanner.close();\r\n    }\r\n}"
        },
        "js": {
          "userInput.js": "const readline = require('readline');\r\n\r\nconst rl = readline.createInterface({\r\n    input: process.stdin,\r\n    output: process.stdout\r\n});\r\n\r\nrl.question('', (input) => {\r\n    rl.close();\r\n});"
        },
        "py": {
          "user_input.py": "input = input()"
        },
        "rb": {
          "user_input.rb": "input = gets.chomp"
        },
        "rs": {
          "user_input.rs": "use std::io;\r\n\r\nfn main() {\r\n    let mut input = String::new();\r\n    io::stdin().read_line(&mut input).expect(\"Failed to read line\");\r\n}"
        },
        "ts": {
          "userInput.ts": "import * as readline from 'readline';\r\n\r\nconst rl = readline.createInterface({\r\n    input: process.stdin,\r\n    output: process.stdout\r\n});\r\n\r\nrl.question('', (input: string) => {\r\n    rl.close();\r\n});"
        }
      },
      "3-conditionals": {
        "c": {
          "conditionals.c": "#include <stdio.h>\r\n\r\nint main()\r\n{\r\n    int number;\r\n\r\n    printf(\"Enter a number: \");\r\n    scanf(\"%d\", &number);\r\n\r\n    if (number > 0)\r\n    {\r\n        printf(\"The number is positive.\\n\");\r\n    }\r\n    else if (number < 0)\r\n    {\r\n        printf(\"The number is negative.\\n\");\r\n    }\r\n    else\r\n    {\r\n        printf(\"The number is zero.\\n\");\r\n    }\r\n\r\n    return 0;\r\n}"
        },
        "cpp": {
          "conditionals.cpp": "#include <iostream>\r\n\r\nint main()\r\n{\r\n    int number;\r\n\r\n    std::cout << \"Enter a number: \";\r\n    std::cin >> number;\r\n\r\n    if (number > 0)\r\n    {\r\n        std::cout << \"The number is positive.\" << std::endl;\r\n    }\r\n    else if (number < 0)\r\n    {\r\n        std::cout << \"The number is negative.\" << std::endl;\r\n    }\r\n    else\r\n    {\r\n        std::cout << \"The number is zero.\" << std::endl;\r\n    }\r\n\r\n    return 0;\r\n}"
        },
        "cs": {
          "Conditionals.cs": "using System;\r\n\r\nclass Program\r\n{\r\n    static void Main()\r\n    {\r\n        Console.Write(\"Enter a number: \");\r\n        int number = int.Parse(Console.ReadLine());\r\n\r\n        if (number > 0)\r\n        {\r\n            Console.WriteLine(\"The number is positive.\");\r\n        }\r\n        else if (number < 0)\r\n        {\r\n            Console.WriteLine(\"The number is negative.\");\r\n        }\r\n        else\r\n        {\r\n            Console.WriteLine(\"The number is zero.\");\r\n        }\r\n    }\r\n}"
        },
        "go": {
          "conditionals.go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n)\r\n\r\nfunc main() {\r\n    var number int\r\n\r\n    fmt.Print(\"Enter a number: \")\r\n    fmt.Scan(&number)\r\n\r\n    if number > 0 {\r\n        fmt.Println(\"The number is positive.\")\r\n    } else if number < 0 {\r\n        fmt.Println(\"The number is negative.\")\r\n    } else {\r\n        fmt.Println(\"The number is zero.\")\r\n    }\r\n}"
        },
        "hs": {
          "conditionals.hs": "main :: IO ()\r\nmain = do\r\n    putStrLn \"Enter a number:\"\r\n    input <- getLine\r\n    let number = read input :: Int\r\n    if number > 0\r\n        then putStrLn \"The number is positive.\"\r\n        else if number < 0\r\n            then putStrLn \"The number is negative.\"\r\n            else putStrLn \"The number is zero.\""
        },
        "java": {
          "Conditionals.java": "import java.util.Scanner;\r\n\r\npublic class Conditionals {\r\n    public static void main(String[] args) {\r\n        Scanner scanner = new Scanner(System.in);\r\n\r\n        System.out.print(\"Enter a number: \");\r\n        int number = scanner.nextInt();\r\n\r\n        if (number > 0) {\r\n            System.out.println(\"The number is positive.\");\r\n        } else if (number < 0) {\r\n            System.out.println(\"The number is negative.\");\r\n        } else {\r\n            System.out.println(\"The number is zero.\");\r\n        }\r\n\r\n        scanner.close();\r\n    }\r\n}"
        },
        "js": {
          "conditionals.js": "const readline = require(\"readline\");\r\n\r\nconst rl = readline.createInterface({\r\n  input: process.stdin,\r\n  output: process.stdout,\r\n});\r\n\r\nrl.question(\"Enter a number: \", (input) => {\r\n  const number = parseInt(input, 10);\r\n\r\n  if (number > 0) {\r\n    console.log(\"The number is positive.\");\r\n  } else if (number < 0) {\r\n    console.log(\"The number is negative.\");\r\n  } else {\r\n    console.log(\"The number is zero.\");\r\n  }\r\n\r\n  rl.close();\r\n});\r\n"
        },
        "py": {
          "conditionals.py": "def main():\r\n    number = int(input(\"Enter a number: \"))\r\n\r\n    if number > 0:\r\n        print(\"The number is positive.\")\r\n    elif number < 0:\r\n        print(\"The number is negative.\")\r\n    else:\r\n        print(\"The number is zero.\")\r\n\r\nif __name__ == \"__main__\":\r\n    main()"
        },
        "rb": {
          "conditionals.rb": "def main\r\n  print \"Enter a number: \"\r\n  number = gets.to_i\r\n\r\n  if number > 0\r\n    puts \"The number is positive.\"\r\n  elsif number < 0\r\n    puts \"The number is negative.\"\r\n  else\r\n    puts \"The number is zero.\"\r\n  end\r\nend\r\n\r\nmain if __FILE__ == $0"
        },
        "rs": {
          "conditionals.rs": "use std::io;\r\n\r\nfn main() {\r\n    println!(\"Enter a number:\");\r\n\r\n    let mut input = String::new();\r\n    io::stdin().read_line(&mut input).expect(\"Failed to read line\");\r\n\r\n    let number: i32 = input.trim().parse().expect(\"Please enter a valid number\");\r\n\r\n    if number > 0 {\r\n        println!(\"The number is positive.\");\r\n    } else if number < 0 {\r\n        println!(\"The number is negative.\");\r\n    } else {\r\n        println!(\"The number is zero.\");\r\n    }\r\n}"
        },
        "ts": {
          "conditionals.ts": "import * as readline from 'readline';\r\n\r\nconst rl = readline.createInterface({\r\n    input: process.stdin,\r\n    output: process.stdout\r\n});\r\n\r\nrl.question('Enter a number: ', (input) => {\r\n    const number = parseInt(input, 10);\r\n\r\n    if (number > 0) {\r\n        console.log('The number is positive.');\r\n    } else if (number < 0) {\r\n        console.log('The number is negative.');\r\n    } else {\r\n        console.log('The number is zero.');\r\n    }\r\n\r\n    rl.close();\r\n});"
        }
      }
    },
    "2-sorting": {
      "1-bubble-sort": {
        "c": {
          "bubble_sort.c": "void bubbleSort(int arr[], int n)\r\n{\r\n    for (int i = 0; i < n - 1; i++)\r\n    {\r\n        for (int j = 0; j < n - i - 1; j++)\r\n        {\r\n            if (arr[j] > arr[j + 1])\r\n            {\r\n                int temp = arr[j];\r\n                arr[j] = arr[j + 1];\r\n                arr[j + 1] = temp;\r\n            }\r\n        }\r\n    }\r\n}"
        },
        "cpp": {
          "bubble_sort.cpp": "#include <algorithm>\r\n\r\nvoid bubbleSort(int arr[], int n)\r\n{\r\n    for (int i = 0; i < n - 1; i++)\r\n    {\r\n        for (int j = 0; j < n - i - 1; j++)\r\n        {\r\n            if (arr[j] > arr[j + 1])\r\n            {\r\n                std::swap(arr[j], arr[j + 1]);\r\n            }\r\n        }\r\n    }\r\n}"
        },
        "cs": {
          "bubble-sort.cs": "public class BubbleSort\r\n{\r\n    public static void Sort(int[] arr)\r\n    {\r\n        int n = arr.Length;\r\n        for (int i = 0; i < n - 1; i++)\r\n        {\r\n            for (int j = 0; j < n - i - 1; j++)\r\n            {\r\n                if (arr[j] > arr[j + 1])\r\n                {\r\n                    int temp = arr[j];\r\n                    arr[j] = arr[j + 1];\r\n                    arr[j + 1] = temp;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}"
        },
        "go": {
          "bubble_sort.go": "package main\r\n\r\nfunc bubbleSort(arr []int) {\r\n    n := len(arr)\r\n    for i := 0; i < n-1; i++ {\r\n        for j := 0; j < n-i-1; j++ {\r\n            if arr[j] > arr[j+1] {\r\n                arr[j], arr[j+1] = arr[j+1], arr[j]\r\n            }\r\n        }\r\n    }\r\n}"
        },
        "hs": {
          "bubble-sort.hs": "bubbleSort :: Ord a => [a] -> [a]\r\nbubbleSort xs = foldr (\\_ -> bubble) xs [1..length xs - 1]\r\n  where bubble [] = []\r\n        bubble [x] = [x]\r\n        bubble (x:y:xs) = if x > y then y : bubble (x:xs) else x : bubble (y:xs)"
        },
        "java": {
          "BubbleSort.java": "public class BubbleSort {\r\n    public static void bubbleSort(int[] arr) {\r\n        int n = arr.length;\r\n        for (int i = 0; i < n - 1; i++) {\r\n            for (int j = 0; j < n - i - 1; j++) {\r\n                if (arr[j] > arr[j + 1]) {\r\n                    int temp = arr[j];\r\n                    arr[j] = arr[j + 1];\r\n                    arr[j + 1] = temp;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}"
        },
        "js": {
          "bubbleSort.js": "function bubbleSort(arr) {\r\n  let len = arr.length;\r\n  let swapped;\r\n\r\n  do {\r\n    swapped = false;\r\n    for (let i = 0; i < len - 1; i++) {\r\n      if (arr[i] > arr[i + 1]) {\r\n        [arr[i], arr[i + 1]] = [arr[i + 1], arr[i]];\r\n        swapped = true;\r\n      }\r\n    }\r\n  } while (swapped);\r\n\r\n  return arr;\r\n}"
        },
        "py": {
          "BubbleSort.py": "def bubble_sort(arr):\r\n    n = len(arr)\r\n    for i in range(n - 1):\r\n        for j in range(n - i - 1):\r\n            if arr[j] > arr[j + 1]:\r\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\r\n    return arr"
        },
        "rb": {
          "bubble_sort.rb": "def bubble_sort(arr)\r\n  n = arr.length\r\n  (n-1).times do |i|\r\n    (n-i-1).times do |j|\r\n      if arr[j] > arr[j+1]\r\n        arr[j], arr[j+1] = arr[j+1], arr[j]\r\n      end\r\n    end\r\n  end\r\n  arr\r\nend"
        },
        "rs": {
          "bubble_sort.rs": "fn bubble_sort(arr: &mut [i32]) {\r\n    let n = arr.len();\r\n    for i in 0..n {\r\n        for j in 0..n-i-1 {\r\n            if arr[j] > arr[j+1] {\r\n                arr.swap(j, j+1);\r\n            }\r\n        }\r\n    }\r\n}"
        },
        "ts": {
          "bubble-sort.ts": "function BubbleSort(arr: number[]): number[] {\r\n    let n = arr.length;\r\n    for (let i = 0; i < n - 1; i++) {\r\n        for (let j = 0; j < n - i - 1; j++) {\r\n            if (arr[j] > arr[j + 1]) {\r\n                [arr[j], arr[j + 1]] = [arr[j + 1], arr[j]];\r\n            }\r\n        }\r\n    }\r\n    return arr;\r\n}"
        }
      },
      "2-quick-sort": {
        "c": {
          "quick_sort.c": "#include <stdio.h>\r\n\r\nvoid swap(int *a, int *b)\r\n{\r\n    int temp = *a;\r\n    *a = *b;\r\n    *b = temp;\r\n}\r\n\r\nint partition(int arr[], int low, int high)\r\n{\r\n    int pivot = arr[high];\r\n    int i = (low - 1);\r\n\r\n    for (int j = low; j <= high - 1; j++)\r\n    {\r\n        if (arr[j] < pivot)\r\n        {\r\n            i++;\r\n            swap(&arr[i], &arr[j]);\r\n        }\r\n    }\r\n    swap(&arr[i + 1], &arr[high]);\r\n    return (i + 1);\r\n}\r\n\r\nvoid quickSort(int arr[], int low, int high)\r\n{\r\n    if (low < high)\r\n    {\r\n        int pi = partition(arr, low, high);\r\n\r\n        quickSort(arr, low, pi - 1);\r\n        quickSort(arr, pi + 1, high);\r\n    }\r\n}"
        },
        "cpp": {
          "quick_sort.cpp": "#include <iostream>\r\n#include <vector>\r\n\r\nvoid swap(int &a, int &b)\r\n{\r\n    int temp = a;\r\n    a = b;\r\n    b = temp;\r\n}\r\n\r\nint partition(std::vector<int> &arr, int low, int high)\r\n{\r\n    int pivot = arr[high];\r\n    int i = low - 1;\r\n\r\n    for (int j = low; j <= high - 1; j++)\r\n    {\r\n        if (arr[j] < pivot)\r\n        {\r\n            i++;\r\n            swap(arr[i], arr[j]);\r\n        }\r\n    }\r\n    swap(arr[i + 1], arr[high]);\r\n    return i + 1;\r\n}\r\n\r\nvoid quickSort(std::vector<int> &arr, int low, int high)\r\n{\r\n    if (low < high)\r\n    {\r\n        int pi = partition(arr, low, high);\r\n\r\n        quickSort(arr, low, pi - 1);\r\n        quickSort(arr, pi + 1, high);\r\n    }\r\n}"
        },
        "cs": {
          "quick-sort.cs": "using System;\r\n\r\npublic class QuickSort\r\n{\r\n    public static void Sort(int[] arr, int low, int high)\r\n    {\r\n        if (low < high)\r\n        {\r\n            int pi = Partition(arr, low, high);\r\n\r\n            Sort(arr, low, pi - 1);\r\n            Sort(arr, pi + 1, high);\r\n        }\r\n    }\r\n\r\n    private static int Partition(int[] arr, int low, int high)\r\n    {\r\n        int pivot = arr[high];\r\n        int i = (low - 1);\r\n\r\n        for (int j = low; j <= high - 1; j++)\r\n        {\r\n            if (arr[j] < pivot)\r\n            {\r\n                i++;\r\n                Swap(ref arr[i], ref arr[j]);\r\n            }\r\n        }\r\n        Swap(ref arr[i + 1], ref arr[high]);\r\n        return (i + 1);\r\n    }\r\n\r\n    private static void Swap(ref int a, ref int b)\r\n    {\r\n        int temp = a;\r\n        a = b;\r\n        b = temp;\r\n    }\r\n}"
        },
        "go": {
          "quick_sort.go": "package main\r\n\r\nimport (\r\n    \"fmt\"\r\n)\r\n\r\nfunc quickSort(arr []int, low, high int) {\r\n    if low < high {\r\n        pi := partition(arr, low, high)\r\n        quickSort(arr, low, pi-1)\r\n        quickSort(arr, pi+1, high)\r\n    }\r\n}\r\n\r\nfunc partition(arr []int, low, high int) int {\r\n    pivot := arr[high]\r\n    i := low - 1\r\n\r\n    for j := low; j <= high-1; j++ {\r\n        if arr[j] < pivot {\r\n            i++\r\n            arr[i], arr[j] = arr[j], arr[i]\r\n        }\r\n    }\r\n    arr[i+1], arr[high] = arr[high], arr[i+1]\r\n    return i + 1\r\n}"
        },
        "hs": {
          "quick-sort.hs": "quicksort [] = []\r\nquicksort (p:xs) = quicksort [x | x <- xs, x < p] ++ [p] ++ quicksort [x | x <- xs, x >= p]"
        },
        "java": {
          "QuickSort.java": "public class QuickSort {\r\n    public static void quickSort(int[] arr, int low, int high) {\r\n        if (low < high) {\r\n            int pi = partition(arr, low, high);\r\n\r\n            quickSort(arr, low, pi - 1);\r\n            quickSort(arr, pi + 1, high);\r\n        }\r\n    }\r\n\r\n    private static int partition(int[] arr, int low, int high) {\r\n        int pivot = arr[high];\r\n        int i = (low - 1);\r\n\r\n        for (int j = low; j <= high - 1; j++) {\r\n            if (arr[j] < pivot) {\r\n                i++;\r\n                swap(arr, i, j);\r\n            }\r\n        }\r\n        swap(arr, i + 1, high);\r\n        return (i + 1);\r\n    }\r\n\r\n    private static void swap(int[] arr, int i, int j) {\r\n        int temp = arr[i];\r\n        arr[i] = arr[j];\r\n        arr[j] = temp;\r\n    }\r\n}"
        },
        "js": {
          "quickSort.js": "function quickSort(arr, low = 0, high = arr.length - 1) {\r\n    if (low < high) {\r\n        const pi = partition(arr, low, high);\r\n\r\n        quickSort(arr, low, pi - 1);\r\n        quickSort(arr, pi + 1, high);\r\n    }\r\n}\r\n\r\nfunction partition(arr, low, high) {\r\n    const pivot = arr[high];\r\n    let i = low - 1;\r\n\r\n    for (let j = low; j <= high - 1; j++) {\r\n        if (arr[j] < pivot) {\r\n            i++;\r\n            [arr[i], arr[j]] = [arr[j], arr[i]];\r\n        }\r\n    }\r\n    [arr[i + 1], arr[high]] = [arr[high], arr[i + 1]];\r\n    return i + 1;\r\n}"
        },
        "py": {
          "QuickSort.py": "def quick_sort(arr, low=0, high=None):\r\n    if high is None:\r\n        high = len(arr) - 1\r\n    if low < high:\r\n        pi = partition(arr, low, high)\r\n        quick_sort(arr, low, pi - 1)\r\n        quick_sort(arr, pi + 1, high)\r\n\r\ndef partition(arr, low, high):\r\n    pivot = arr[high]\r\n    i = low - 1\r\n    for j in range(low, high):\r\n        if arr[j] < pivot:\r\n            i += 1\r\n            arr[i], arr[j] = arr[j], arr[i]\r\n    arr[i + 1], arr[high] = arr[high], arr[i + 1]\r\n    return i + 1"
        },
        "rb": {
          "quick_sort.rb": "def quick_sort(arr, low = 0, high = arr.length - 1)\r\n  if low < high\r\n    pi = partition(arr, low, high)\r\n    quick_sort(arr, low, pi - 1)\r\n    quick_sort(arr, pi + 1, high)\r\n  end\r\nend\r\n\r\ndef partition(arr, low, high)\r\n  pivot = arr[high]\r\n  i = low - 1\r\n  (low...high).each do |j|\r\n    if arr[j] < pivot\r\n      i += 1\r\n      arr[i], arr[j] = arr[j], arr[i]\r\n    end\r\n  end\r\n  arr[i + 1], arr[high] = arr[high], arr[i + 1]\r\n  i + 1\r\nend"
        },
        "rs": {
          "quick_sort.rs": "fn quick_sort(arr: &mut [i32], low: isize, high: isize) {\r\n    if low < high {\r\n        let pi = partition(arr, low, high);\r\n        quick_sort(arr, low, pi - 1);\r\n        quick_sort(arr, pi + 1, high);\r\n    }\r\n}\r\n\r\nfn partition(arr: &mut [i32], low: isize, high: isize) -> isize {\r\n    let pivot = arr[high as usize];\r\n    let mut i = low - 1;\r\n\r\n    for j in low..high {\r\n        if arr[j as usize] < pivot {\r\n            i += 1;\r\n            arr.swap(i as usize, j as usize);\r\n        }\r\n    }\r\n    arr.swap((i + 1) as usize, high as usize);\r\n    i + 1\r\n}"
        },
        "ts": {
          "quick-sort.ts": "function QuickSort(arr: number[], low: number = 0, high: number = arr.length - 1): void {\r\n    if (low < high) {\r\n        const pi = partition(arr, low, high);\r\n        quickSort(arr, low, pi - 1);\r\n        quickSort(arr, pi + 1, high);\r\n    }\r\n}\r\n\r\nfunction Partition(arr: number[], low: number, high: number): number {\r\n    const pivot = arr[high];\r\n    let i = low - 1;\r\n\r\n    for (let j = low; j < high; j++) {\r\n        if (arr[j] < pivot) {\r\n            i++;\r\n            [arr[i], arr[j]] = [arr[j], arr[i]]; // Swap elements\r\n        }\r\n    }\r\n    [arr[i + 1], arr[high]] = [arr[high], arr[i + 1]]; // Swap elements\r\n    return i + 1;\r\n}"
        }
      }
    },
    "3-leetcode": {
      "1-two-sum": {
        "c": {
          "two_sum.c": "#include <stdio.h>\r\n#include <stdlib.h>\r\n\r\nint *twoSum(int *nums, int numsSize, int target, int *returnSize)\r\n{\r\n    for (int i = 0; i < numsSize; i++)\r\n    {\r\n        for (int j = i + 1; j < numsSize; j++)\r\n        {\r\n            if (nums[i] + nums[j] == target)\r\n            {\r\n                int *result = (int *)malloc(2 * sizeof(int));\r\n                result[0] = i;\r\n                result[1] = j;\r\n                *returnSize = 2;\r\n                return result;\r\n            }\r\n        }\r\n    }\r\n    *returnSize = 0;\r\n    return NULL;\r\n}"
        },
        "cpp": {
          "two_sum.cpp": "#include <iostream>\r\n#include <vector>\r\n#include <unordered_map>\r\n\r\nstd::vector<int> twoSum(const std::vector<int> &nums, int target)\r\n{\r\n    std::unordered_map<int, int> num_map;\r\n    for (int i = 0; i < nums.size(); i++)\r\n    {\r\n        int complement = target - nums[i];\r\n        if (num_map.find(complement) != num_map.end())\r\n        {\r\n            return {num_map[complement], i};\r\n        }\r\n        num_map[nums[i]] = i;\r\n    }\r\n    return {};\r\n}"
        },
        "cs": {
          "TwoSum.cs": "using System;\r\nusing System.Collections.Generic;\r\n\r\npublic class TwoSumSolution\r\n{\r\n    public static int[] TwoSum(int[] nums, int target)\r\n    {\r\n        Dictionary<int, int> numMap = new Dictionary<int, int>();\r\n        for (int i = 0; i < nums.Length; i++)\r\n        {\r\n            int complement = target - nums[i];\r\n            if (numMap.ContainsKey(complement))\r\n            {\r\n                return new int[] { numMap[complement], i };\r\n            }\r\n            numMap[nums[i]] = i;\r\n        }\r\n        return new int[0];\r\n    }\r\n}"
        },
        "go": {
          "two_sum.go": "package main\r\n\r\nfunc twoSum(nums []int, target int) []int {\r\n    numMap := make(map[int]int)\r\n    for i, num := range nums {\r\n        complement := target - num\r\n        if idx, ok := numMap[complement]; ok {\r\n            return []int{idx, i}\r\n        }\r\n        numMap[num] = i\r\n    }\r\n    return nil\r\n}"
        },
        "hs": {
          "two-sum.hs": "import qualified Data.Map.Strict as Map\r\n\r\ntwoSum :: [Int] -> Int -> [(Int, Int)]\r\ntwoSum nums target = \r\n    [(x, y) | (x, y) <- zip nums [0..], \r\n              y' <- Map.lookup (target - x) seen, \r\n              y /= y']\r\n  where seen = Map.fromList $ zip nums [0..]"
        },
        "java": {
          "TwoSum.java": "import java.util.HashMap;\r\nimport java.util.Map;\r\n\r\npublic class TwoSum {\r\n    public static int[] twoSum(int[] nums, int target) {\r\n        Map<Integer, Integer> numMap = new HashMap<>();\r\n        for (int i = 0; i < nums.length; i++) {\r\n            int complement = target - nums[i];\r\n            if (numMap.containsKey(complement)) {\r\n                return new int[] { numMap.get(complement), i };\r\n            }\r\n            numMap.put(nums[i], i);\r\n        }\r\n        return null;\r\n    }\r\n}"
        },
        "js": {
          "twoSum.js": "function twoSum(nums, target) {\r\n    const numMap = new Map();\r\n    for (let i = 0; i < nums.length; i++) {\r\n        const complement = target - nums[i];\r\n        if (numMap.has(complement)) {\r\n            return [numMap.get(complement), i];\r\n        }\r\n        numMap.set(nums[i], i);\r\n    }\r\n    return [];\r\n}"
        },
        "py": {
          "two_sum.py": "def two_sum(nums, target):\r\n    num_map = {}\r\n    for i, num in enumerate(nums):\r\n        complement = target - num\r\n        if complement in num_map:\r\n            return [num_map[complement], i]\r\n        num_map[num] = i\r\n    return None"
        },
        "rb": {
          "two_sum.rb": "def two_sum(nums, target)\r\n  seen = {}\r\n  nums.each_with_index do |num, index|\r\n    complement = target - num\r\n    if seen.key?(complement)\r\n      return [seen[complement], index]\r\n    end\r\n    seen[num] = index\r\n  end\r\n  []\r\nend"
        },
        "rs": {
          "two_sum.rs": "use std::collections::HashMap;\r\n\r\nimpl Solution {\r\n    pub fn two_sum(nums: Vec<i32>, target: i32) -> Vec<i32> {\r\n        let mut complements = HashMap::new();\r\n        for (i, &num) in nums.iter().enumerate() {\r\n            if let Some(&j) = complements.get(&num) {\r\n                return vec![j as i32, i as i32];\r\n            }\r\n            complements.insert(target - num, i);\r\n        }\r\n        vec![]\r\n    }\r\n}"
        },
        "ts": {
          "twoSum.ts": "function TwoSum(nums: number[], target: number): number[] {\r\n    const seen: Map<number, number> = new Map();\r\n    for (let i = 0; i < nums.length; i++) {\r\n        const complement = target - nums[i];\r\n        if (seen.has(complement)) {\r\n            return [seen.get(complement)!, i];\r\n        }\r\n        seen.set(nums[i], i);\r\n    }\r\n    return [];\r\n}"
        }
      }
    }
  }
}