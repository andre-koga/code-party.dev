{
  "allData": {
    "1-basics": {
      "1-hello-world": {
        "c": {
          "hello_world.c": "#include <stdio.h>\r\n\r\nint main()\r\n{\r\n    printf(\"Hello World!\\n\");\r\n    return 0;\r\n}"
        },
        "cpp": {
          "hello_world.cpp": "#include <iostream>\r\n\r\nint main()\r\n{\r\n    std::cout << \"Hello World!\" << std::endl;\r\n    return 0;\r\n}"
        },
        "cs": {
          "HelloWorld.cs": "using System;\r\n\r\nclass Program\r\n{\r\n    static void Main()\r\n    {\r\n        Console.WriteLine(\"Hello World!\");\r\n    }\r\n}"
        },
        "go": {
          "hello_world.go": "package main\r\n\r\nimport \"fmt\"\r\n\r\nfunc main() {\r\n\tfmt.Println(\"Hello World!\")\r\n}"
        },
        "hs": {
          "hello-world.hs": "main :: IO ()\r\nmain = putStrLn \"Hello, World!\""
        },
        "java": {
          "HelloWorld.java": "public class HelloWorld {\r\n    public static void main(String[] args) {\r\n        System.out.println(\"Hello World!\");\r\n    }\r\n}"
        },
        "js": {
          "helloWorld.js": "console.log(\"Hello World!\");\r\n"
        },
        "py": {
          "hello_world.py": "print (\"Hello World!\")"
        },
        "rb": {
          "hello_world.rb": "puts 'Hello world!'"
        },
        "rs": {
          "hello_world.rs": "fn main() {\r\n    println!(\"Hello world!\");\r\n}"
        },
        "ts": {
          "helloWorld.ts": "console.log(\"Hello World!\");"
        }
      },
      "2-user-input": {
        "c": {
          "user_input.c": "#include <stdio.h>\r\n\r\nint main()\r\n{\r\n    char input[100];\r\n    scanf(\"%99s\", input);\r\n    return 0;\r\n}"
        },
        "cpp": {
          "user_input.cpp": "#include <iostream>\r\n\r\nint main()\r\n{\r\n    std::string input;\r\n    std::cin >> input;\r\n    return 0;\r\n}"
        },
        "cs": {
          "UserInput.cs": "using System;\r\n\r\nclass Program\r\n{\r\n    static void Main()\r\n    {\r\n        string input = Console.ReadLine();\r\n    }\r\n}"
        },
        "go": {
          "user_input.go": "package main\r\n\r\nimport (\r\n    \"bufio\"\r\n    \"fmt\"\r\n    \"os\"\r\n)\r\n\r\nfunc main() {\r\n    reader := bufio.NewReader(os.Stdin)\r\n    input, _ := reader.ReadString('\\n')\r\n}"
        },
        "hs": {
          "user-input.hs": "main :: IO ()\r\nmain = do\r\n    input <- getLine\r\n    return ()"
        },
        "java": {
          "UserInput.java": "import java.util.Scanner;\r\n\r\npublic class UserInput {\r\n    public static void main(String[] args) {\r\n        Scanner scanner = new Scanner(System.in);\r\n        String input = scanner.nextLine();\r\n        scanner.close();\r\n    }\r\n}"
        },
        "js": {
          "userInput.js": "const readline = require('readline');\r\n\r\nconst rl = readline.createInterface({\r\n    input: process.stdin,\r\n    output: process.stdout\r\n});\r\n\r\nrl.question('', (input) => {\r\n    rl.close();\r\n});"
        },
        "py": {
          "user_input.py": "input = input()"
        },
        "rb": {
          "user_input.rb": "input = gets.chomp"
        },
        "rs": {
          "user_input.rs": "use std::io;\r\n\r\nfn main() {\r\n    let mut input = String::new();\r\n    io::stdin().read_line(&mut input).expect(\"Failed to read line\");\r\n}"
        },
        "ts": {
          "userInput.ts": "import * as readline from 'readline';\r\n\r\nconst rl = readline.createInterface({\r\n    input: process.stdin,\r\n    output: process.stdout\r\n});\r\n\r\nrl.question('', (input: string) => {\r\n    rl.close();\r\n});"
        }
      }
    },
    "2-sorting": {
      "1-bubble-sort": {
        "c": {
          "bubble_sort.c": ""
        },
        "cpp": {
          "bubble_sort.cpp": ""
        },
        "cs": {
          "bubble-sort.cs": ""
        },
        "go": {
          "bubble_sort.go": ""
        },
        "hs": {
          "bubble-sort.hs": ""
        },
        "java": {
          "bubble-sort.java": ""
        },
        "js": {
          "bubbleSort.js": "function bubbleSort(arr) {\r\n  let len = arr.length;\r\n  let swapped;\r\n\r\n  do {\r\n    swapped = false;\r\n    for (let i = 0; i < len; i++) {\r\n      if (arr[i] > arr[i + 1]) {\r\n        let tmp = arr[i];\r\n        arr[i] = arr[i + 1];\r\n        arr[i + 1] = tmp;\r\n        swapped = true;\r\n      }\r\n    }\r\n  } while (swapped);\r\n\r\n  return arr;\r\n}\r\n"
        },
        "py": {
          "BubbleSort.py": "def bubble_sort(arr):\r\n    n = len(arr)\r\n    \r\n    for i in range(n):\r\n        for j in range(0, n-i-1):\r\n            if arr[j] > arr[j+1]:\r\n                arr[j], arr[j+1] = arr[j+1], arr[j]\r\n                \r\n    return arr"
        },
        "rb": {
          "bubble_sort.rb": ""
        },
        "rs": {
          "bubble_sort.rs": ""
        },
        "ts": {
          "bubble-sort.ts": ""
        }
      },
      "2-quick-sort": {
        "c": {
          "quick_sort.c": ""
        },
        "cpp": {
          "quick_sort.cpp": ""
        },
        "cs": {
          "quick-sort.cs": ""
        },
        "go": {
          "quick_sort.go": ""
        },
        "hs": {
          "quick-sort.hs": ""
        },
        "java": {
          "quick-sort.java": ""
        },
        "js": {
          "quickSort.js": "function quickSort(arr) {\r\n  if (arr.length <= 1) {\r\n    return arr;\r\n  }\r\n\r\n  const pivot = arr[Math.floor(arr.length / 2)];\r\n  const left = [];\r\n  const right = [];\r\n\r\n  for (let i = 0; i < arr.length; i++) {\r\n    if (i === Math.floor(arr.length / 2)) continue;\r\n    if (arr[i] < pivot) {\r\n      left.push(arr[i]);\r\n    } else {\r\n      right.push(arr[i]);\r\n    }\r\n  }\r\n\r\n  return quickSort(left).concat(pivot, quickSort(right));\r\n}\r\n"
        },
        "py": {
          "QuickSort.py": "def quick_sort(arr):\r\n    def partition(arr, low, high):\r\n        pivot = arr[high]\r\n        i = low - 1\r\n        for j in range(low, high):\r\n            if arr[j] < pivot:\r\n                i += 1\r\n                arr[i], arr[j] = arr[j], arr[i]\r\n        arr[i+1], arr[high] = arr[high], arr[i+1]\r\n        return i+1\r\n\r\n    def quick_sort_rec(arr, low, high):\r\n        if low < high:\r\n            pi = partition(arr, low, high)\r\n            quick_sort_rec(arr, low, pi-1)\r\n            quick_sort_rec(arr, pi+1, high)\r\n\r\n    quick_sort_rec(arr, 0, len(arr)-1)\r\n    return arr"
        },
        "rb": {
          "quick_sort.rb": ""
        },
        "rs": {
          "quick_sort.rs": ""
        },
        "ts": {
          "quick-sort.ts": ""
        }
      }
    },
    "3-leetcode": {
      "1-two-sum": {
        "c": {
          "two_sum.c": ""
        },
        "cpp": {
          "two_sum.cpp": ""
        },
        "cs": {
          "TwoSum.cs": ""
        },
        "go": {
          "two_sum.go": ""
        },
        "hs": {
          "two-sum.hs": ""
        },
        "java": {
          "TwoSum.java": ""
        },
        "js": {
          "twoSum.js": ""
        },
        "py": {
          "two_sum.py": ""
        },
        "rb": {
          "two_sum.rb": ""
        },
        "rs": {
          "two_sum.rs": ""
        },
        "ts": {
          "twoSum.ts": ""
        }
      }
    }
  }
}